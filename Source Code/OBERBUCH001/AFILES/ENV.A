;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;+;	File:		ENV.A
;+;	Purpose:	OB-MX envelope functions
;+;	Original:		1993-05-25	D.N. Lynx Crowe
;+;	Revision:	50	1994-05-25	D.N. Lynx Crowe
;+;
;+;	Contents:
;+;
;+;		do_env()		envelope advance processing
;+;		init_envs()		initialize envelope data structures
;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;*	{Ch 1}	1994-01-26	D.N. Lynx Crowe
;*	{Ch 1}	changed exe_decay to pick up current value of modulated sustain

;*	{Ch 2}	1994-05-09	D.N. Lynx Crowe
;*	{Ch 2}	changed %track macro to check for overflow / wraparound errors

;*	{Ch 3}	1994-05-09	D.N. Lynx Crowe
;*	{Ch 3}	corrected jump range to accomodate {Ch 2}

;*	{Ch 4}	1994-05-25	D.N. Lynx Crowe
;*	{Ch 4}	changed t_ticks from WORD to BYTE to save space

	name	env

	lstout-

$VOICE.INC
$REG8096.INC

	lstout+
	locsym+
	lstmac-

	extern	rand

	extern	kbtable
	extern	t_incrs
	extern	t_ticks
	extern	v

;+ --------------------------------------------------------------------------

RANDVALC	equ	(2*VT_PP_RANDOM)+voice_curval	; offset to random in curval[]
RANDVALO	equ	(2*VT_PP_RANDOM)+voice_outval	; offset to random in outval[]

ENV_FUZZ	equ		8			; fuzzy compare FUZZ value

;+ --------------------------------------------------------------------------

B_GATE		equ		0			; GATE bit number in r_gate/voice_vgate
B_UNGATE	equ		7			; UNGATE bit number in r_gate/voice_vgate

M_GATE		equ		001H		; GATE bit mask in r_gate/voice_vgate
M_UNGATE	equ		080H		; UNGATE bit mask in r_gate/voice_vgate

B_TRIG		equ		0			; TRIGGER bit number in r_trig/voice_vtrig

M_TRIG		equ		001H		; TRIGGER bit mask in r_trig/voice_vtrig

;+ ----------------------------------------------------------------------------
;+ Some important notes about vgate and vtrig
;+ ----------------------------------------------------------------------------
;+
;+ vgate can take on values of:
;+
;+	0x80	voice un-gated		(set by gate.a)
;+	0x00	voice not gated		(set by env.a when it finds vgate = 0x80)
;+	0x01	voice gated on		(set by gate.a)
;+
;+ This is done so that env.a knows explicitly when a voice receives note off.
;+
;+ vtrig is set to 0x01 in gate.a and usually reset in env.a, which may decide
;+ to set it to 0x01 again in the case of a free-run/repeat mode sync attempt.
;+ ----------------------------------------------------------------------------

;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;+ ---------------------------------------------------------------------------
;+ %envi -- envelope initialization macro
;+ ---------------------------------------------------------------------------
;+
;+ Where:
;+
;+	env		is one of: ENV1, ENV2, ENV3, ENV4
;+	n		is one of: ENV_1, ENV_2, ENV_3, ENV_4
;+
;+	r_vp	points at the voice
;+
;+ Trashes:	r_ep, r_ax, r_t1
;+ ---------------------------------------------------------------------------

	macro	%envi							; <env>, <n>

	add		r_ep, r_vp, #voice_envs			; setup r_ep = &vp->envs[\1]
	add		r_ep, #(env_size*\1)

	stb		0, env_mode[r_ep]				; ep->mode = 0
	stb		0, env_attack[r_ep]				; ep->attack = 0
	stb		0, env_atck_del[r_ep]			; ep->atck_del = 0
	stb		0, env_decay[r_ep]				; ep->decay = 0
	stb		0, env_dcay_del[r_ep]			; ep->dcay_del = 0
	stb		0, env_sustain[r_ep]			; ep->sustain = 0
	stb		0, env_sus_dcay[r_ep]			; ep->sus_dcay = 0
	stb		0, env_release[r_ep]			; ep->release = 0
	stb		0, env_vel_sens[r_ep]			; ep->vel_sens = 0
	stb		0, env_estep[r_ep]				; ep->estep = 0  (STAGE_STOP)

	ldbze	r_ax, #1
	st		r_ax, env_etcnt[r_ep]			; ep->etcnt = 1
	st		r_ax, env_etick[r_ep]			; ep->etick = 1

	st		0, env_eincr[r_ep]				; ep->eincr = 0
	st		0, env_ecntr[r_ep]				; ep->ecntr = 0
	st		0, env_current[r_ep]			; ep->current = 0

	add		r_ax, r_vp, #voice_curval		; setup r_ax = &vp->curval

	add		r_t1, r_ax, #(2*VT_PP_\0)		; ep->p_vcur = &vp->curval[VT_PP_\0]
	st		r_t1, env_p_vcur[r_ep]

	add		r_ax, r_vp, #voice_outval		; setup r_ax = &vp->outval

	add		r_t1, r_ax, #(2*VT_PP_\0)		; ep->p_vout = &vp->outval[VT_PP_\0]
	st		r_t1, env_p_vout[r_ep]

	add		r_t1, r_ax, #(2*VT_\0_ATTACK)	; ep->p_attack = &vp->outval[VT_\0_ATTACK]
	st		r_t1, env_p_attack[r_ep]

	add		r_t1, r_ax, #(2*VT_\0_ATCK_DEL)	; ep->p_atck_del = &vp->outval[VT_\0_ATCK_DEL]
	st		r_t1, env_p_atck_del[r_ep]

	add		r_t1, r_ax, #(2*VT_\0_DECAY)	; ep->p_decay = &vp->outval[VT_\0_DECAY]
	st		r_t1, env_p_decay[r_ep]

	add		r_t1, r_ax, #(2*VT_\0_DCAY_DEL)	; ep->p_dcay_del = &vp->outval[VT_\0_DCAY_DEL]
	st		r_t1, env_p_dcay_del[r_ep]

	add		r_t1, r_ax, #(2*VT_\0_SUSTAIN)	; ep->p_sustain = &vp->outval[VT_\0_SUSTAIN]
	st		r_t1, env_p_sustain[r_ep]

	add		r_t1, r_ax, #(2*VT_\0_SUS_DCAY)	; ep->p_sus_dcay = &vp->outval[VT_\0_SUS_DCAY]
	st		r_t1, env_p_sus_dcay[r_ep]

	add		r_t1, r_ax, #(2*VT_\0_RELEASE)	; ep->p_release = &vp->outval[VT_\0_RELEASE]
	st		r_t1, env_p_release[r_ep]

	add		r_t1, r_ax, #(2*VT_\0_VEL_SENS)	; ep->p_vel_sens = &vp->outval[VT_\0_VEL_SENS]
	st		r_t1, env_p_vel_sens[r_ep]

	endmac

;+ ---------------------------------------------------------------------------
;+ %fzzcmp -- fuzzy comparison macro
;+ ---------------------------------------------------------------------------
;+ if <val1> and <val2> are "equal" within <fuzz>
;+   jnh succeeds
;+ else
;+   jh succeeds
;+
;+ Trashes:	r_ax
;+ ---------------------------------------------------------------------------

	macro	%fzzcmp							; <val1>, <val2>, <fuzz>

	ld		r_ax, \0						; get val1
	sub		r_ax, \1						; subtract val2
	jbc		r_ax+1, 7, fz_\@				; jump if result positive

	neg		r_ax							; abs(r_ax)

fz_\<:

	cmp		r_ax, \2						; compare abs difference to fuzz

	endmac

;+ ---------------------------------------------------------------------------
;+ %track -- keyboard tracking macro
;+ ---------------------------------------------------------------------------
;+	ptr_name	is one of: attack, dcay_del, decay, sus_dcay, release
;+
;+	r_ep		points at the ENV structure
;+
;+ Uses:		r_ep
;+ Trashes:	r_ax
;+ ---------------------------------------------------------------------------

	macro   %track 							; <ptr_name>

	push	r_kb
	ldbze	r_ax, env_\0[r_ep]				; get the raw time byte

;	add		r_ax, <r_ax						; make it a WORD offset		{-Ch 4}

	ldbze	r_ax, t_ticks[r_ax]				; convert to ticks			{Ch 4}

	st		r_ax, env_etcnt[r_ep]			; ep->etcnt = t_ticks[env_\0]
	st		r_ax, env_etick[r_ep]			; ep->etick = t_ticks[env_\0]

	ld		r_ax, env_p_\0[r_ep]			; get the increment pointer
	ld		r_ax, [r_ax]					; get the modulated increment
	mulu	r_kb, r_ax, <r_track			; multiply by the tracking
	divu	r_kb, #1000						; scale
	jv		tr0_\@							; jump if overflow			{+Ch 2}

	jbc		r_kb+1, 7, tr1_\.				; jump if within range		{+Ch 2}

tr0_\.:

	ld		r_kb, #07FFFH					; force overflow to 0x7FFF	{+Ch 2}

tr1_\<:

	st		r_kb, env_eincr[r_ep]			; store the increments
	st		0, env_ecntr[r_ep]				; clear the counter
	pop		r_kb

	endmac

;+ ---------------------------------------------------------------------------
;+ %setcnt -- setup tick counter macro
;+ ---------------------------------------------------------------------------
;+	ptr_name	is one of: atck_del
;+
;+	r_ep		points at the ENV structure
;+
;+ Uses:		r_ep
;+ Trashes:	r_ax
;+ ---------------------------------------------------------------------------

	macro   %setcnt 						; <ptr_name>

	ldbze	r_ax, env_\0[r_ep]				; get the raw time byte

;	add		r_ax, <r_ax						; make it a WORD offset		{-Ch 4}

	ldbze	r_ax, t_ticks[r_ax]				; convert to ticks			{Ch 4}

	st		r_ax, env_etcnt[r_ep]			; ep->etcnt = t_ticks[env_\0]
	st		r_ax, env_etick[r_ep]			; ep->etick = t_ticks[env_\0]

	ld		r_ax, env_p_\0[r_ep]			; get the increment pointer
	ld		r_ax, [r_ax]					; get the increment
	or		r_ax, <r_ax						; check for a zero increment
	jgt		sc_\@							; jump if > zero

	ldbze	r_ax, #1						; increment = 1

sc_\<:

	st		r_ax, env_eincr[r_ep]			; ep->eincr = *(ep->p_\0)
	st		0, env_ecntr[r_ep]				; ep->ecntr = 0

	endmac

;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	rseg	aregs(1)		; REGISTERS -- 26 bytes -- LOCALS (env.a)

r_ax:		dsw		1		; [+ 0] temporary
r_t0:		dsw		1		; [+ 2] temporary
r_t1:		dsw		1		; [+ 4] temporary
r_t2:		dsw		1		; [+ 6] temporary

r_cnt:		dsw		1		; [+ 8] ENV counter

r_vp:		dsw		1		; [+10} VOICE pointer
r_ep:		dsw		1		; [+12] ENV pointer

r_stage:	dsw		1		; [+14] ENV estep (RJZF)
r_val:		dsw		1		; [+16] current value

r_gate:		dsb		1		; [+18] gate flag temporary		(from VOICE vgate)
r_trig:		dsb		1		; [+19] trigger flag temporary	(from VOICE vtrig)

r_flags:	dsb		1		; [+20] ENV mode
			dsb		1		; [+21] PAD

r_tc:		dsw		1		; [+22] tick count temporary	(from ENV etcnt)
r_track:	dsw		1		; [+24] keyboard tracking value

;+ ---------------------------------------------------------------------------

	public	env_regs		; REGISTERS -- 26 bytes -- DEBUG ACCESS (env.a)

env_regs	equ		r_ax

;+ ---------------------------------------------------------------------------

r_kb		equ		TEMP+2	; must be on a LONG boundary

;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	rseg	acode(1)

;+ ---------------------------------------------------------------------------
;+ envelope stage values  (MUST match stage_table entries, below - NO GAPS)
;+ ---------------------------------------------------------------------------

STAGE_STOP			EQU	0
STAGE_REPEAT		EQU	1
STAGE_ATTACKDELAY	EQU	2
STAGE_ATTACK		EQU	3
STAGE_DECAYDELAY	EQU	4
STAGE_DECAY			EQU	5
STAGE_SUSTAIN		EQU	6
STAGE_SUSTAINDECAY	EQU	7
STAGE_RELEASESETUP	EQU	8
STAGE_RELEASE		EQU	9

;+ ---------------------------------------------------------------------------
;+ envelope stage dispatch table  (order MUST match STAGE_x equates, above)
;+ ---------------------------------------------------------------------------

stage_table:	dcw  exe_stop			;  0 STAGE_STOP
				dcw  exe_repeat			;  1 STAGE_REPEAT
				dcw  exe_attackdelay	;  2 STAGE_ATTACKDELAY
				dcw  exe_attack			;  3 STAGE_ATTACK
				dcw  exe_decaydelay		;  4 STAGE_DECAYDELAY
				dcw  exe_decay			;  5 STAGE_DECAY
				dcw  exe_sustain		;  6 STAGE_SUSTAIN
				dcw  exe_sustaindecay	;  7 STAGE_SUSTAINDECAY
				dcw	 exe_su_release		;  8 STAGE_RELEASESETUP
				dcw  exe_release		;  9 STAGE_RELEASE

;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;+;	do_env() -- envelope advance processing
;+;
;+;	Prototype:
;+;
;+;		void do_env()
;+;
;+;	Calls:
;+;
;+;		rand()
;+;
;+;	This happens once per clock interrupt.
;+;
;+;	All registers used are private to this process.
;+;
;+;	During this process, the following generally holds true:
;+;
;+;		r_vp		points at the VOICE data structure
;+;		r_ep		points at the ENV data structure
;+;
;+;		r_cnt		holds the envelope count (4=ENV1, 3=ENV2, 2=ENV3, 1=ENV4)
;+;
;+;		r_trig		holds the voice trigger flag, vp->vtrig
;+;		r_gate		holds the voice gate flag, vp->vgate
;+;
;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	public  do_env			; void do_env()

do_env:

	ld	  r_vp, #v							; setup voice pointer

; ---------------------------------------------------------------------------
; ----- VOICE LOOP ----------------------------------------------------------
; ---------------------------------------------------------------------------

; ---------------------------------------------------------------------------
; eal_next_voice -- next voice loop
; setup to process the envelopes for a voice
; ---------------------------------------------------------------------------
;
; from here on, some things are pretty stable:
;
;	r_vp		current voice data structure pointer (entry value)	stable
;	r_trig		LSB = trigger bit									stable
;	r_gate		BIT7 = UNGATE, BIT0 = GATE							stable
;
; these get updated for the outer loop:
;
;	r_ep		current envelope data structure pointer				updated
;	r_cnt		envelope counter (4=ENV1, 3=ENV2, 2=ENV3, 1=ENV4)	updated
;
; ---------------------------------------------------------------------------

eal_next_voice:

	ldbze	r_cnt, #4						; setup r_cnt for 4 envelopes
	add		r_ep, r_vp, #voice_envs			; ep = &vp->envs

	ldb		r_trig, voice_vtrig[r_vp]		; put trigger flag in r_trig

	ldb		r_gate, voice_vgate[r_vp]		; put gate flag in r_gate

	stb		0, voice_vtrig[r_vp]			; reset VOICE trigger flag

	andb	r_t1, r_gate, #not(M_UNGATE)	; mask out the explicit ungate bit
	stb		r_t1, voice_vgate[r_vp]			; update VOICE data structure

	orb		r_gate, voice_pedal[r_vp]		; or-in the pedal flag

; ---------------------------------------------------------------------------
; ----- ENVELOPE LOOP -------------------------------------------------------
; ---------------------------------------------------------------------------

; ---------------------------------------------------------------------------
; env_adv_loop -- envelope advance loop
; setup the stage, flags, and value registers for the current envelope.
; ---------------------------------------------------------------------------
;
; these are set here, and used throughout the following code:
;
;	r_flags		current envelope mode flags (8 bit register)		updated
;	r_stage 	current envelope stage index (16 bits, RJZF)		updated
;	r_val		current envelope value (0..0x7FFF)					updated
; ---------------------------------------------------------------------------

env_adv_loop:

	ldb		r_flags, env_mode[r_ep]			; put mode flags in r_flags

	jbc		r_trig, B_TRIG, ea_ntg			; jump if not triggered this cycle

	orb		r_flags, #ENV_CYCLE				; set "triggered in CYCLE" bit
	stb		r_flags, env_mode[r_ep]			; ...

ea_ntg:

	ldbze	r_stage, env_estep[r_ep]		; put stage in r_stage
	ld		r_val, env_current[r_ep]		; put current value in r_val

; ---------------------------------------------------------------------------
; check the trigger flag and (re-)trigger the envelope if it's set.
; ---------------------------------------------------------------------------

	jbs		r_trig, B_TRIG, eal_go			; process evelope if triggered

; ---------------------------------------------------------------------------
; see if the envelope is stopped.  if so, we needn't process it further.
; ---------------------------------------------------------------------------

	cmpb	r_stage, #STAGE_STOP			; are we stopped ?
	be		eal_eol							; go check next ENV if so

; ---------------------------------------------------------------------------
; check the tick count for this envelope. process the evelope if the
; tick count is LE 1, otherwise decrement the tick count.
; ---------------------------------------------------------------------------

	ld		r_tc, env_etcnt[r_ep]			; see if the tick count has run out
	cmp		r_tc, #1
	jnh		eal_go							; go setup to do stage if so

	dec		r_tc							; decrement the tick count
	st		r_tc, env_etcnt[r_ep]
	br		eal_eol							; go check next ENV

; ---------------------------------------------------------------------------
; setup keyboard tracking amount used by the %track macro.
; ---------------------------------------------------------------------------

eal_go:

	ld		r_track, #1000					; preset r_track to 1.000

	jbc		r_flags, ENV_M_TRACK, eal_nomod	; jump if no keyboard tracking

	ldbze	r_t1, voice_note+1[r_vp]		; lookup tracking value
	add		r_ax, r_t1, <r_t1
	ld		r_track, kbtable[r_ax]			; r_track = kbtable[vp->note]

; ---------------------------------------------------------------------------
; decide whether we (re-)trigger the envelope.
; ---------------------------------------------------------------------------

eal_nomod:

	jbc		r_trig, B_TRIG, eal_notrig		; jump if no new trigger flag

; ---------------------------------------------------------------------------
; new trigger seen,  (re-)trigger envelope ...
; ---------------------------------------------------------------------------

	ldbze	r_stage, #STAGE_REPEAT			; set stage = repeat
	sjmp	eal_proc_env					; go advance envelope

; ---------------------------------------------------------------------------
; no new trigger,  see if we un-gate or continue
; ---------------------------------------------------------------------------

eal_notrig:

	jbs		r_gate, B_GATE, eal_proc_env	; continue if gate flag is on

; ---------------------------------------------------------------------------
; UNGATE envelope -- this gets a bit complex ...
; ---------------------------------------------------------------------------

	cmpb	r_stage, #STAGE_STOP			; see if we're at the end
	je		eal_eol							; go do next ENV if so

; --- check for ungate while processing ENV4 in GATE/!ENV4 mode -------------

	cmp		r_cnt, #1						; are we in ENV4 ?
	jne		eal_cadc						; jump if not

	jbs		r_flags, ENV_M_GATE, eal_ungate	; go do release if in GATE/!ENV4 mode

; --- check for explicit ungate during attack delay -------------------------

eal_cadc:

	jbc		r_flags, ENV_M_CYCLE, eal_nad	; only check if CYCLE is TRUE

	cmpb	r_stage, #STAGE_ATTACKDELAY		; see if it's in attack delay
	jne		eal_nad							; go check for free-run if not

	jbc		r_gate, B_UNGATE, eal_nad		; jump if not explicit ungate

	clr		r_val							; reset the envelope

	andb	r_flags, #not(ENV_CYCLE)		; clear the "triggered in CYCLE" bit
	stb		r_flags, env_mode[r_ep]

	ldbze	r_stage, #STAGE_STOP			; force things to a halt
	sjmp	eal_proc_env

; --- check for ungate during free-run mode ---------------------------------

eal_nad:

	jbs		r_flags, ENV_M_FREE, eal_proc_env	; go advance env if free run set

; --- check for ungate during release stage ---------------------------------

	cmpb	r_stage, #STAGE_RELEASE			; see if we're in release stage
	je		eal_proc_env					; jump if so

; --- force release setup ---------------------------------------------------

eal_ungate:

	ldbze	r_stage, #STAGE_RELEASESETUP	; setup release

; ---------------------------------------------------------------------------
; eal_proc_env -- advance the envelope to its next stage
; ---------------------------------------------------------------------------
;
; at this point:
;
;	r_gate		BIT7 = UNGATE, BIT0 = GATE
;	r_trig		LSB = trigger bit
;	r_vp		current voice data structure pointer
;	r_cnt		envelope counter (4=ENV1, 3=ENV2, 2=ENV3, 1=ENV4)
;	r_ep		current envelope data structure pointer
;	r_flags		current envelope mode flags
;	r_stage 	current envelope stage index (RJZF)
;	r_val		current envelope value
;	r_tc		current envelope tick count
;	r_track		current envelope keyboard tracking value
; ---------------------------------------------------------------------------

eal_proc_env:

	add		r_ax, r_stage, <r_stage		; get the stage function address ...
	ld		r_t1, stage_table[r_ax]		; ... r_t1 = stage_table[ep->estep]
	br		[r_t1]						; go process the stage

; ---------------------------------------------------------------------------
; ----- END OF STAGE PROCESSING ---------------------------------------------
; ---------------------------------------------------------------------------

; ---------------------------------------------------------------------------
; eal_ret -- set tick counter to 1 and finish stage processing
; ---------------------------------------------------------------------------

eal_ret:

	ldbze	r_tc, #1					; ep->etcnt = 1
	sjmp	eal_eos

; ---------------------------------------------------------------------------
; re_tick -- reset tick counter and finish stage processing.
; ---------------------------------------------------------------------------

re_tick:

	ld		r_tc, env_etick[r_ep]		; ep->etcnt = ep->etick

; ---------------------------------------------------------------------------
; Update the envelope data structure.
; ---------------------------------------------------------------------------

eal_eos:

	st		r_tc, env_etcnt[r_ep]		; update tick counter in ep->etcnt

	stb		r_stage, env_estep[r_ep]	; update ep->estep from r_stage

	st		r_val, env_current[r_ep]	; update ep->current from r_val

	add		r_val, env_s_vel[r_ep]		; add scaled velocity
	jnv		eal_nsvv					; jump no overflow

	ld		r_val, #07FFFH				; limit overflow to 0x7FFF
	sjmp	eal_vup						; ...

eal_nsvv:

	jbc		r_val+1, 7, eal_vup			; jump if value stayed positive

	clr		r_val						; limit underlfow to 0

eal_vup:

	ld		r_ax, env_p_vcur[r_ep]		; update *(ep->p_vcur) from r_val
	st		r_val, [r_ax]

	ld		r_ax, env_p_vout[r_ep]		; update *(ep->p_vout) from r_val
	st		r_val, [r_ax]

; ---------------------------------------------------------------------------
; eal_eol -- setup to processs the next envelope
; ---------------------------------------------------------------------------

eal_eol:

	add		r_ep, #env_size				; point at next envelope

	dec		r_cnt						; decrement envelope counter
	bne		env_adv_loop				; loop if there are more to do

; ---------------------------------------------------------------------------
; ----- END OF ENVELOPE LOOP ------------------------------------------------
; ---------------------------------------------------------------------------

	cmp		r_vp, #v+voice_size			; see if we've done both voices
	je		eal_exit					; return if so

	add		r_vp, #voice_size			; point at VOICE B
	br		eal_next_voice				; go do its envelopes

; ---------------------------------------------------------------------------
; ----- END OF VOICE LOOP ---------------------------------------------------
; ---------------------------------------------------------------------------

eal_exit:

	ret									; return -- processing complete

;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;+; ENVELOPE STAGE PROCESSING
;+; -------- ----- ----------
;+;
;+;	These co-routines are entered from eal_proc_env by a jump to
;+;	*stage_table[ep->estep], and return to either:
;+;
;+;		eal_ret		to continue with ep->etcnt = 1
;+;
;+;		  or
;+;
;+;		re_tick		to continue with ep->etcnt = ep->etick
;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;+ ===========================================================================
;+   *   | 1: STAGE_REPEAT:	(re-)trigger envelope
;+  **   | 
;+   *   | Here we first decide if we need to reset the value to 0.
;+   *   | We then check for attack delay. If we have any, we continue with
;+   *   | attack delay.  Otherwise, we go setup the attack.
;+   *   | 
;+  ***  | If we're in ENV4, we also get a new random number.
;+ ===========================================================================

exe_repeat:

	cmp		r_cnt, #1					; are we processing ENV4 ?
	jne		exe_rpt_nr					; jump if not

	lcall	rand						; get a new random number

	st		r0, RANDVALC[r_vp]			; update vp->curval[VT_RANDOM]
	st		r0, RANDVALO[r_vp]			; update vp->outval[VT_RANDOM]

; ------------------------------------------------------------------------

exe_rpt_nr:

	jbc		r_flags, ENV_M_GATE, exe_rpt_ng	; jump if we're not in GATE mode

	sjmp	gate_sust					; go open up the gate

; ------------------------------------------------------------------------

exe_rpt_ng:

	jbc		r_flags, ENV_M_RESET, su_atck_del	; go do attack delay if no reset

	clr		r_val						; reset envelope value to 0

; ------------------------------------------------------------------------
; su_atck_del -- setup for attack delay
; ------------------------------------------------------------------------

su_atck_del:

	cmpb	0, env_atck_del[r_ep]		; see if there's an attack delay
	je		su_attack					; go setup attack if not

	ldbze	r_stage, #STAGE_ATTACKDELAY	; set attack delay stage

	%setcnt	atck_del					; setup attack delay time

;+ ===========================================================================
;+  ***  |  2: STAGE_ATTACKDELAY -- execute attack delay
;+ *   * | 
;+     * |  In this stage we add eincr to ep->ecntr to advance time,
;+  ***  |  while leaving the value in r_val undisturbed,
;+ *     |  since this is just a delay stage.
;+ *     | 
;+ ***** | 
;+ ===========================================================================

exe_attackdelay:

	ld		r_t2, env_ecntr[r_ep]		; get ecntr
	add		r_t2, env_eincr[r_ep]		; add the modulated increment

	jbs		r_t2+1, 7, su_attack		; jump if we've reached the limit

	st		r_t2, env_ecntr[r_ep]		; store updated ecntr

	sjmp	re_tick						; reset tick counter and return

; ------------------------------------------------------------------------
; su_attack -- setup for attack
; ------------------------------------------------------------------------

su_attack:

	andb	r_flags, #not(ENV_CYCLE)	; clear the "triggered in CYCLE" bit
	stb		r_flags, env_mode[r_ep]

	cmpb	0, env_attack[r_ep]			; see if there's an attack
	je		su_dcay_del					; go start decay delay if not

	ldbze	r_stage, #STAGE_ATTACK		; set attack stage

	%track	attack						; setup attack time

;+ ===========================================================================
;+  ***  | 3: STAGE_ATTACK -- execute attack
;+ *   * | 
;+     * | In this stage we add eincr to r_val to advance time and update the value,
;+  ***  | since we have to get the value to 0x7FFF and that's where time wants to
;+     * | be incremented to as well.
;+ *   * | 
;+  ***  | 
;+ ===========================================================================

exe_attack:

	add		r_val, env_eincr[r_ep]		; add delta to value
	jbs		r_val+1, 7, su_dcay_del		; jump on overflow

	sjmp	re_tick						; reset tick counter and return

; ------------------------------------------------------------------------
; setup for decay delay
; ------------------------------------------------------------------------

su_dcay_del:

	ld		r_val, #07FFFH				; force level to maximum

	cmpb	0, env_dcay_del[r_ep]		; see if there's a decay delay
	je		su_decay					; go setup to do decay if not

	ldbze	r_stage, #STAGE_DECAYDELAY	; set decay delay state

	%track	dcay_del					; setup decay delay time

;+ ===========================================================================
;+   **  | 4: STAGE_DECAYDELAY -- execute decay delay
;+  * *  | 
;+ *  *  | In this stage we increment ep->ecntr by ep->eincr,
;+ ***** | until it maxes out at 0x7FFF, to advance time.
;+    *  | 
;+    *  | We leave r_val alone, as this is only a delay stage.
;+    *  | 
;+ ===========================================================================

exe_decaydelay:

	ld		r_t0, env_ecntr[r_ep]		; see if count has maxed out
	cmp		r_t0, #07FFFH
	jh		su_decay					; go do decay if so (ep->ecntr > 0x7FFF)

	je		su_decay					; go do decay if so (ep->ecntr = 0x7FFF)

	add		r_t0, env_eincr[r_ep]		; increment delay counter

	jbs		r_t0+1, 7, su_decay			; go do decay if we overflow

	st		r_t0, env_ecntr[r_ep]		; store updated counter
	sjmp	re_tick						; reset tick counter and return

; ------------------------------------------------------------------------
; su_decay -- setup for decay
; ------------------------------------------------------------------------

su_decay:

	cmpb	0, env_decay[r_ep]			; see if there's a decay time
	jne		su_dcy1						; go setup decay if so		{*Ch 3}

	sjmp	su_sustain					; go do sustain if not		{+Ch 3}

su_dcy1:

	ldbze	r_stage, #STAGE_DECAY		; set decay stage

	%track	decay						; setup decay time

	sjmp	eal_ret						; return for next pass

;+ ===========================================================================
;+ ***** | 5: STAGE_DECAY -- execute decay
;+ *     | 
;+ ****  | Here we decrement the value in r_val until it becomes
;+     * | within ENV_FUZZ of the sustain value. 
;+     * | We then go setup for sustain.
;+ *   * | 
;+  ***  | 
;+ ===========================================================================

exe_decay:

;* start of {Ch 1}

;*	ld		r_t1, env_sustain[r_ep]		; get sustain value			{-Ch 1}

	ld		r_ax, env_p_sustain[r_ep]	; get sustain value			{+Ch 1}
	ld		r_t1, [r_ax]				; ... in r_t1				{+Ch 1}

;* end of {Ch 1}

	%fzzcmp	r_t1, r_val, #ENV_FUZZ		; see if value is close enough
	jnh		su_sustain					; go do sustain if so

	ld		r_ax, env_p_decay[r_ep]		; get pointer to modulated decay
	sub		r_val, [r_ax]				; subtract decay from value
	cmp		r_val, r_t1					; see if we've gone below sustain
	jle		at_sustain					; sustain if so (r_val LE ep->sustain)

	%fzzcmp r_t1, r_val, #ENV_FUZZ		; see if value is close enough
	jnh		at_sustain					; we're 'at' sustain if so

	sjmp	re_tick						; reset tick counter and return

at_sustain:

	ld		r_val, r_t1					; force it to reach sustain value

; ------------------------------------------------------------------------
; su_sustain -- setup for sustain or sustain_decay
; ------------------------------------------------------------------------

su_sustain:

	addb	r_ax, 0, env_sus_dcay[r_ep]	; see if a sustain decay exists
	cmpb	r_ax, #127					; ... and it's not NONE
	je		gate_sust

	sjmp	su_sus_dcay					; go do sustain decay if so

gate_sust:

	ldbze	r_stage, #STAGE_SUSTAIN		; set sustain stage

;+ ===========================================================================
;+  ***  | 6: STAGE_SUSTAIN -- execute sustain
;+ *     | 
;+ *     | In this stage we check for a repeated, free running envelope,
;+ ****  | and if it is, we skip doing sustain.
;+ *   * | 
;+ *   * | Otherwise, we just hang out until gating goes away.
;+  ***  | 
;+ ===========================================================================

exe_sustain:

; ------------------------------------------------------------------------
; first we check the gating.  we never want to be in the sustain stage
; with the voice ungated. we normally only arrive at this situation when
; in repeat & free-run mode.
; ------------------------------------------------------------------------

	jbc		r_gate, B_GATE, su_sus_dcay		; setup sustain decay if not gated

; ------------------------------------------------------------------------
; if the GATE/!ENV4 bit is set, we just open the gate to the sustain
; level when we're triggered.
; ------------------------------------------------------------------------

	jbs		r_flags, ENV_M_GATE, open_gate	; jump if we're in GATE mode

; ------------------------------------------------------------------------
; STAGE_SUSTAIN is skipped in repeat mode...
; see if we're in repeat mode and go do sustain decay if so
; ------------------------------------------------------------------------

	jbs		r_flags, ENV_M_REPEAT, su_sus_dcay

; ------------------------------------------------------------------------
; ensure we are precisely at the sustain value, which can change if it's
; the target of a user modulation.
; ------------------------------------------------------------------------

open_gate:

	ld		r_ax, env_p_sustain[r_ep]	; set val = sustain value
	ld		r_val, [r_ax]
	sjmp	eal_ret						; return for next pass

; ------------------------------------------------------------------------
; su_sus_dcay -- setup sustain decay
; ------------------------------------------------------------------------

su_sus_dcay:

	ld		r_ax, env_p_sustain[r_ep]	; set val = sustain value
	ld		r_val, [r_ax]

	jbc		r_flags, ENV_M_GATE, not_a_gate	; jump if not in gate mode

	sjmp	exe_zero					;  go shut off the gate

not_a_gate:

	ldb		r_ax, env_sus_dcay[r_ep]	; see if there's a sustain decay
	cmpb	r_ax, #127
	je		exe_su_release				; go do release if not

	ldbze	r_stage, #STAGE_SUSTAINDECAY	; set sustain decay stage

	%track	sus_dcay					; setup sustain decay time

;+ ===========================================================================
;+ ***** | 7: STAGE_SUSTAINDECAY -- execute sustain decay
;+     * | 
;+    *  | Here we decrement the value in r_val until it gets within
;+   *   | ENV_FUZZ of zero.
;+  *    | 
;+  *    | Then we force it to 0 and go setup the release.
;+  *    | 
;+ ===========================================================================

exe_sustaindecay:

	sub		r_val, env_eincr[r_ep]		; decrement the value by ep->eincr
	jle		esd_rel						; go do release if LE 0

	%fzzcmp	0, r_val, #ENV_FUZZ			; see if value is close enough to 0
	jnh		esd_rel						; go do release if so

	sjmp	re_tick						; reset tick counter and return

esd_rel:

	clr		r_val						; make sure value = 0

;+ ===========================================================================
;+  ***  | 8: STAGE_RELEASESETUP -- setup release
;+ *   * | 
;+ *   * | We could get here from above, or during stage setup when we
;+  ***  | find the gate off.
;+ *   * | 
;+ *   * | 
;+  ***  | Here we do the setup for release.  Unless, of course, it's ENV4 ...
;+ ===========================================================================

exe_su_release:

	cmpb	r_cnt, #1					; is this ENV4 ?
	jne		ers_ng						; jump if not

	jbc		r_flags, ENV_M_GATE, ers_ng	; jump if not in gate mode

	sjmp	exe_zero					; go close the gate

; ------------------------------------------------------------------------

ers_ng:

	addb	r_ax, 0, env_release[r_ep]	; see if release time is zero
	jne		ers_nd						; go setup release if non-zero

	sjmp	exe_zero					; done if it's 0

; ------------------------------------------------------------------------

ers_nd:

	cmpb	r_ax, #127					; see if release time is NONE
	jne		ers_nn						; go setup release if not

	sjmp	exe_done					; go process end of envelope if so

; ------------------------------------------------------------------------

ers_nn:

	ldbze	r_stage, #STAGE_RELEASE		; set release stage

	%track	release						; setup release time

;+ ===========================================================================
;+  ***  | 9:  STAGE_RELEASE -- execute release
;+ *   * | 
;+ *   * | Here we decrement the value in r_val until it's within ENV_FUZZ
;+  **** | of zero.
;+     * | 
;+ *   * | When it gets there, we go process the end of the envelope.
;+  ***  | 
;+ ===========================================================================

exe_release:

	sub		r_val, env_eincr[r_ep]		; apply delta to value
	jle		exe_zero					; done if result's LE 0

	cmp		r_val, #ENV_FUZZ			; see if we're close enough to 0
	jnh		exe_zero					; done if so

	sjmp	re_tick						; reset tick counter and return

; ------------------------------------------------------------------------
; exe_zero -- process end of envelope -- set envelope output to zero
; ------------------------------------------------------------------------

exe_zero:

	clr		r_val						; force value = 0 for end of envelope

; ------------------------------------------------------------------------
; exe_done -- process end of envelope -- leave output at last value
; ------------------------------------------------------------------------

exe_done:

	jbs		r_flags, ENV_M_GATE, exe_norepeat	; stop ENV if in gate mode

	jbc		r_flags, ENV_M_REPEAT, exe_norepeat	; stop ENV if not repeat mode

; --- in repeat mode -----------------------------------------------------

	jbs		r_flags, ENV_M_FREE, exe_dorepeat	; jump if we're in free run mode

	jbc		r_gate, B_GATE, exe_norepeat		; jump if not gated

; ------------------------------------------------------------------------
; REPEAT flag is set:  start over
; ------------------------------------------------------------------------

exe_dorepeat:

	ldbze	r_stage, #STAGE_REPEAT		; set repeat stage
	sjmp	eal_ret						; return for next pass

; ------------------------------------------------------------------------
; envelope done, STOP processing it
; ------------------------------------------------------------------------

exe_norepeat:

	ldbze	r_stage, #STAGE_STOP		; set stop stage

;+ ===========================================================================
;+  ***  | 0: STAGE_STOP -- execute stop
;+ *   * | 
;+ *  ** | This stage simply returns.  It's rarely executed.
;+ * * * | 
;+ **  * | r_stage is already set to STAGE_STOP, so we leave it there.
;+ *   * | 
;+  ***  | 
;+ ===========================================================================

exe_stop:

	sjmp	eal_ret						; return for next pass

;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;+;	init_envs() -- initialize envelope data structures
;+;
;+;	Prototype:
;+;
;+; 	void init_envs();
;+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	public	init_envs			; void init_envs()

init_envs:

	ld		r_vp, #v					; initialize VOICE A ENVs

	lstout-

	%envi	ENV1, 0
	%envi	ENV2, 1
	%envi	ENV3, 2
	%envi	ENV4, 3

	lstout+

	ld		r_vp, #v+voice_size			; initialize VOICE B ENVs

	lstout-

	%envi	ENV1, 0
	%envi	ENV2, 1
	%envi	ENV3, 2
	%envi	ENV4, 3

	lstout+

	ret

; The End --------------------------------------------------------------------

	end
